import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:my_flutter_project/core/config/api_config.dart';
import 'package:my_flutter_project/core/services/http_interceptor.dart';
// import 'package:url_launcher/url_launcher.dart'; // E-posta i√ßin gerekebilir
import '../widgets/font_widget.dart';
import '../widgets/error_display_widget.dart'; // For ErrorDisplayWidget

// Updated _launchEmail function to show a dialog
Future<void> _launchEmail(BuildContext context, WidgetRef ref) async {
  showDialog(
    context: context,
    builder: (BuildContext dialogContext) {
      return _SupportEmailDialog(ref: ref);
    },
  );
}

class _SupportEmailDialog extends StatefulWidget {
  final WidgetRef ref;
  const _SupportEmailDialog({required this.ref});

  @override
  State<_SupportEmailDialog> createState() => _SupportEmailDialogState();
}

class _SupportEmailDialogState extends State<_SupportEmailDialog> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _messageController = TextEditingController();
  bool _isLoading = false;

  @override
  void dispose() {
    _emailController.dispose();
    _messageController.dispose();
    super.dispose();
  }

  Future<void> _sendSupportEmail() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
      });

      final email = _emailController.text;
      final message = _messageController.text;

      try {
        final response = await HttpInterceptor.post(
          Uri.parse('${ApiConfig.baseUrl}/User/send-support-email'),
          body: jsonEncode({'email': email, 'message': message}),
        );

        if (mounted) {
          if (response.statusCode == 200) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: FontWidget(
                  text: 'Destek mesajƒ±nƒ±z ba≈üarƒ±yla g√∂nderildi.',
                  styleType: TextStyleType.bodyMedium,
                  color: Colors.black,
                ),
                backgroundColor: const Color(0xFFB2FF59), // accentColor
              ),
            );
            Navigator.of(context).pop(); // Close the dialog
          } else {
            final responseData = jsonDecode(response.body);
            final errorMessage = responseData['message'] ??
                'Destek mesajƒ± g√∂nderilirken bir hata olu≈ütu. Kod: ${response.statusCode}';
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: ErrorDisplayWidget(errorObject: errorMessage),
                backgroundColor: Colors.redAccent,
              ),
            );
          }
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: ErrorDisplayWidget(errorObject: e.toString()),
              backgroundColor: Colors.redAccent,
            ),
          );
        }
      } finally {
        if (mounted) {
          setState(() {
            _isLoading = false;
          });
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final Color backgroundColor = Colors.grey[900]!;
    final Color textColor = Colors.white;
    final Color accentColor = const Color(0xFFB2FF59);
    final Color inputFillColor = Colors.grey[800]!;

    return AlertDialog(
      backgroundColor: backgroundColor,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      title: FontWidget(
        text: 'Destek Talebi Olu≈ütur',
        styleType: TextStyleType.titleMedium,
        color: textColor,
      ),
      content: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextFormField(
                controller: _emailController,
                style: TextStyle(color: textColor),
                decoration: InputDecoration(
                  labelText: 'E-posta Adresiniz',
                  labelStyle: TextStyle(color: accentColor.withOpacity(0.7)),
                  filled: true,
                  fillColor: inputFillColor,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide.none,
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: accentColor),
                  ),
                ),
                keyboardType: TextInputType.emailAddress,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'L√ºtfen e-posta adresinizi girin.';
                  }
                  if (!value.contains('@') || !value.contains('.')) {
                    return 'L√ºtfen ge√ßerli bir e-posta adresi girin.';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 24),
              TextFormField(
                controller: _messageController,
                style: TextStyle(color: textColor),
                decoration: InputDecoration(
                  labelText: 'Mesajƒ±nƒ±z',
                  labelStyle: TextStyle(color: accentColor.withOpacity(0.7)),
                  filled: true,
                  fillColor: inputFillColor,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide.none,
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: accentColor),
                  ),
                  alignLabelWithHint: true,
                ),
                maxLines: 16,
                minLines: 12,
                keyboardType: TextInputType.multiline,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'L√ºtfen mesajƒ±nƒ±zƒ± girin.';
                  }
                  if (value.length < 10) {
                    return 'Mesajƒ±nƒ±z en az 10 karakter olmalƒ±dƒ±r.';
                  }
                  return null;
                },
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: _isLoading ? null : () => Navigator.of(context).pop(),
          child: FontWidget(
            text: 'ƒ∞ptal',
            styleType: TextStyleType.labelLarge,
            color: accentColor,
          ),
        ),
        ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: accentColor,
            foregroundColor: Colors.black,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
          onPressed: _isLoading ? null : _sendSupportEmail,
          child: _isLoading
              ? const SizedBox(
                  height: 20,
                  width: 20,
                  child: CircularProgressIndicator(
                    color: Colors.black,
                    strokeWidth: 2,
                  ),
                )
              : FontWidget(
                  text: 'G√∂nder',
                  styleType: TextStyleType.labelLarge,
                  color: Colors.black,
                  fontWeight: FontWeight.bold,
                ),
        ),
      ],
    );
  }
}

class HelpScreen extends ConsumerWidget {
  const HelpScreen({super.key});

  // Renkler ve FAQ verisi artƒ±k build metodunda tanƒ±mlanacak
  // --- Theme Colors (Match other screens) ---
  // final Color _backgroundColor = Colors.black;
  // final Color _cardColor = Colors.grey[900]!;
  // final Color _textColor = Colors.white;
  // final Color _secondaryTextColor = Colors.grey[400]!;
  // final Color _accentColor = const Color(0xFFB2FF59); // Light green accent
  // final Color _labelColor = Colors.grey[500]!;

  // Placeholder FAQ data
  // final List<Map<String, dynamic>> _faqs = [...];

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Renkleri ve FAQ'larƒ± burada tanƒ±mla
    final Color backgroundColor = Colors.black;
    final Color cardColor = Colors.grey[900]!;
    final Color textColor = Colors.white;
    final Color secondaryTextColor = Colors.grey[400]!;
    final Color accentColor = const Color(0xFFB2FF59);
    final Color labelColor = Colors.grey[500]!;

    final List<Map<String, dynamic>> faqs = [
      {
        'question': 'MOVLƒ∞Q NEDƒ∞R?',
        'answer':
            '''Movliq, y√ºr√ºy√º≈ü√º ve ko≈üuyu oyunla≈ütƒ±rarak kullanƒ±cƒ±larƒ± ger√ßek zamanlƒ± yarƒ±≈ülara dahil eden, adƒ±mlarƒ±nƒ± mCoin\'e ve √∂d√ºllere d√∂n√º≈üt√ºren yenilik√ßi bir mobil uygulamadƒ±r. Sporu yalnƒ±zca fiziksel deƒüil, aynƒ± zamanda sosyal ve eƒülenceli bir deneyime d√∂n√º≈üt√ºr√ºr.

‚Ä¢ Ger√ßek zamanlƒ± y√ºr√ºy√º≈ü/ko≈üu yarƒ±≈ülarƒ±
‚Ä¢ Arkada≈ülarla √∂zel odalarda yarƒ±≈üma
‚Ä¢ Solo (tek ba≈üƒ±na) mod
‚Ä¢ √ñd√ºl sistemi ve coin kazanƒ±mƒ±
‚Ä¢ Sosyal etkile≈üim, k√ºlt√ºr ve motivasyon''',
        'isExpanded': true,
      },
      {
        'question': 'NEDEN ADIMLARIM VE KONUMUM UYGULAMADA √áALI≈ûMIYOR?',
        'answer':
            '''Bunun sebebi b√ºy√ºk ihtimalle adƒ±m ve konum izinlerinin kapalƒ± olmasƒ±dƒ±r.
Yarƒ±≈ülar, Solo Mod ve diƒüer √∂zelliklerin d√ºzg√ºn √ßalƒ±≈ümasƒ± i√ßin bu iki izne ihtiya√ß duyuyoruz.

üì≤ √á√∂z√ºm i√ßin:

Telefon ayarlarƒ±na git

Uygulamalar > Movliq'i se√ß

‚ÄúAdƒ±m (hareket)‚Äù ve ‚ÄúKonum‚Äù izinlerini a√ß

ƒ∞zinleri a√ßtƒ±ktan sonra uygulamayƒ± yeniden ba≈ülat ve tekrar dene.
H√¢l√¢ sorun ya≈üƒ±yorsan bizimle ileti≈üime ge√ßebilirsin! üõ†Ô∏è''',
        'isExpanded': true,
      },
      {
        'question': 'Canlƒ± Yarƒ±≈ü Nasƒ±l √áalƒ±≈üƒ±r?',
        'answer':
            '''Kullanƒ±cƒ±, uygulama √ºzerinden canlƒ± yarƒ±≈ü lobisine katƒ±lƒ±rken yarƒ±≈üƒ±n t√ºr√ºn√º (i√ß veya dƒ±≈ü mek√¢n) ve s√ºresini se√ßer. Sistem, aynƒ± yarƒ±≈ü ayarlarƒ±na sahip diƒüer kullanƒ±cƒ±larla e≈üle≈ütirme yapar veya kullanƒ±cƒ± yeni bir yarƒ±≈ü ba≈ülatarak oda olu≈üturabilir.
T√ºm yarƒ±≈ümacƒ±lar belirlenen saatte veya ‚Äúba≈ülat‚Äù komutuyla aynƒ± anda yarƒ±≈üa ba≈ülar.

Yarƒ±≈ü sonucunda;

ü•á 1. olan: Aldƒ±ƒüƒ± toplam mesafe √ó 3

ü•à 2. olan: Aldƒ±ƒüƒ± toplam mesafe √ó 2

ü•â 3. olan: Aldƒ±ƒüƒ± toplam mesafe √ó 1.5
kadar mCoin kazanƒ±r.

Diƒüer sƒ±ralamalardaki katƒ±lƒ±mcƒ±lar da aldƒ±klarƒ± toplam mesafe kadar mCoin kazanƒ±r.
Yani sonuncu olsan bile √ºz√ºlme ‚Äî yine de coin kazanƒ±rsƒ±n! üèÜ''',
        'isExpanded': true,
      },
      {
        'question': 'Solo Mod',
        'answer': '''Zaman sƒ±nƒ±rlamasƒ± olmadan kendi ritmini yakala!
ƒ∞ster y√ºr√ºy√º≈ü, ister ko≈üu ‚Äî Solo Mod tam sana g√∂re!

üïí Dilediƒüin an ba≈üla, istediƒüin zaman dur

üì° Adƒ±m, hƒ±z ve mesafe verilerin anlƒ±k takip edilir

üó∫Ô∏è Nerede olursan ol, performansƒ±nƒ± sergile

üß† Ki≈üisel hedeflerine ula≈üƒ±rken ilerlemeni kaydet

üéØ Kayƒ±t edilen her aktiviteyle mCoin kazanƒ±rsƒ±n.
Ama unutma:
üí° Solo Mod'da kazandƒ±ƒüƒ±n mCoin, canlƒ± yarƒ±≈ülara g√∂re biraz daha azdƒ±r.
Yine de her adƒ±mƒ±n √∂d√ºl!

üü¢ Solo mod = √∂zg√ºrl√ºk, esneklik ve motivasyon!''',
        'isExpanded': true,
      },
      {
        'question': 'Sadece Uygulama DEƒûƒ∞L, Bƒ∞R K√úLT√úR',
        'answer':
            '''Movliq, sadece bir fitness uygulamasƒ± deƒüil; kazanmak, payla≈ümak ve sosyalle≈ümek isteyenlerin bulu≈üma noktasƒ±dƒ±r.
Burada attƒ±ƒüƒ±n her adƒ±m sadece fiziksel bir hareket deƒüil; bir baƒü kurma, bir ya≈üam tarzƒ± olu≈üturma ve ilham verme fƒ±rsatƒ±dƒ±r.
Her yarƒ±≈ü, bir baƒülantƒ±; her adƒ±m, daha aktif bir hayatƒ±n par√ßasƒ±!
Movliq K√ºlt√ºr√ºn√ºn Temel Ta≈ülarƒ±:
‚Ä¢ Topluluk Ruhu: Birlikte hareket etmek, birlikte motive olmak
‚Ä¢ Payla≈ümak: Kazandƒ±ƒüƒ±nƒ± sadece kendin i√ßin deƒüil, ilham olmak i√ßin de kullan
‚Ä¢ Etkile≈üim: Arkada≈ülarƒ±nƒ± davet et, √∂zel odalarda yarƒ±≈ü, deneyimini payla≈ü
‚Ä¢ Motivasyon: Her g√ºn, bir √∂ncekinden daha iyi olmak i√ßin bir fƒ±rsat
‚Ä¢ Eri≈üilebilirlik: Profesyonel atlet olman gerekmez sadece harekete ge√ß!''',
        'isExpanded': true,
      },
      {
        'question': '√ñD√úL Sƒ∞STEMƒ∞ & mCOƒ∞N',
        'answer':
            '''Ne kadar √ßok hareket edersen, o kadar √ßok kazanƒ±rsƒ±n! mCoin, movliq evreninde hareketin kar≈üƒ±lƒ±ƒüƒ±dƒ±r. Attƒ±ƒüƒ±n her adƒ±m, √ßƒ±ktƒ±ƒüƒ±n her yarƒ±≈ü, g√∂sterdiƒüin her performans sana mCoin olarak geri d√∂ner.
Kazandƒ±ƒüƒ±n mCoin\'leri Movliq maƒüazasƒ±nda; kuponlara, √∂zel kampanyalara, s√ºrpriz hediyelere ve daha fazlasƒ±na d√∂n√º≈üt√ºrebilirsin.
Nasƒ±l Kazanƒ±rsƒ±n?
‚Ä¢ Canlƒ± yarƒ±≈ülara katƒ±l
‚Ä¢ Solo modda aktif ol
‚Ä¢ G√ºnl√ºk,haftalƒ±k,aylƒ±k hedefleri tamamla
‚Ä¢ √ñzel g√∂revlerde ba≈üarƒ± g√∂ster
‚Ä¢ Ortak havuz yarƒ±≈ülarƒ±nda birinci ol''',
        'isExpanded': true,
      },
      {
        'question': 'Bƒ∞REYSEL & SOSYAL DENEYƒ∞M',
        'answer':
            '''ƒ∞ster tek ba≈üƒ±na, ister arkada≈ülarƒ±nla yarƒ±≈ü! Movliq\'te √∂zel yarƒ±≈ü odalarƒ± olu≈üturabilir, kodla arkada≈ülarƒ±nƒ± davet edebilir, toplulukla etkile≈üime ge√ßebilir, birlikte motive olabilirsiniz.
Sosyal Kullanƒ±m (√ñzel Odalar & Topluluk):
‚Ä¢ √ñzel yarƒ±≈ü odalarƒ± olu≈üturabilir, kodla arkada≈ülarƒ±nƒ± davet edebilirsin
‚Ä¢ Aynƒ± anda yarƒ±≈üarak birlikte hareket etmenin keyfini ya≈üarsƒ±n
‚Ä¢ Grup i√ßi sƒ±ralama ile rekabet artar, motivasyon y√ºkselir
‚Ä¢ Haftalƒ±k etkinlikler, meydan okumalar ve sosyal g√∂revlerle toplulukla baƒü kurarsƒ±n
‚Ä¢ Payla≈üƒ±m, destek ve birlikte kazanma k√ºlt√ºr√º √∂n plandadƒ±r''',
        'isExpanded': true,
      },
      {
        'question': 'ORTAK HAVUZ YARISLARI',
        'answer':
            '''Arkada≈ülarƒ±nla heyecanƒ± artƒ±rmak istiyorsan doƒüru yerdesin! Movliq\'te √∂zel odalarda "ortak havuz yarƒ±≈ülarƒ±" olu≈üturabilirsin.

üß© Odayƒ± kuran ki≈üi, yarƒ±≈ü i√ßin bir mCoin miktarƒ± belirler.
üë• Katƒ±lmak isteyen arkada≈ülar, belirlenen mCoin miktarƒ±na sahipse yarƒ±≈üa dahil olabilir.
üèÅ Yarƒ±≈ü sonunda birinci olan ki≈üi, o odada toplanan t√ºm mCoinleri kazanƒ±r!

Hazƒ±rlƒ±ƒüƒ±nƒ± iyi yap ‚Äî √ß√ºnk√º bu yarƒ±≈üta √∂d√ºl b√ºy√ºk!
mCoin\'lerini kaptƒ±rmamak i√ßin elinden geleni yap! üòâüèÉ‚Äç‚ôÇÔ∏è''',
        'isExpanded': true,
      },
    ];

    return Scaffold(
      backgroundColor: backgroundColor,
      appBar: AppBar(
        title: FontWidget(
          text: 'Yardƒ±m & Destek',
          styleType: TextStyleType.titleLarge,
          color: textColor,
          fontWeight: FontWeight.bold,
        ),
        backgroundColor: backgroundColor,
        elevation: 0,
        iconTheme: IconThemeData(color: accentColor),
        leading: IconButton(
          icon: Icon(Icons.arrow_back_ios, color: accentColor),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            FontWidget(
              text:
                  'Sorularƒ±nƒ±z mƒ± var? Size yardƒ±mcƒ± olmaktan mutluluk duyarƒ±z.',
              styleType: TextStyleType.labelLarge,
              color: secondaryTextColor,
              fontSize: 15,
            ),
            const SizedBox(height: 24),
            _buildSectionTitle('Bize Ula≈üƒ±n', textColor), // Pass color
            ElevatedButton.icon(
              onPressed: () => _launchEmail(
                  context, ref), // Updated to call with context and ref
              icon:
                  Icon(Icons.email_outlined, color: backgroundColor, size: 20),
              label: FontWidget(
                text: 'E-posta G√∂nder',
                styleType: TextStyleType.labelLarge,
                fontWeight: FontWeight.bold,
                color: backgroundColor,
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: accentColor,
                foregroundColor: backgroundColor,
                minimumSize: const Size(double.infinity, 50),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                padding: const EdgeInsets.symmetric(vertical: 14),
              ),
            ),
            const SizedBox(height: 32),
            _buildSectionTitle(
                'Sƒ±k√ßa Sorulan Sorular', textColor), // Pass color
            // Build FAQ items
            ListView.builder(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              itemCount: faqs.length, // build metodu i√ßindeki listeyi kullan
              itemBuilder: (context, index) {
                final faq = faqs[index];
                if (faq['isExpanded']) {
                  return _buildFaqExpansionTile(
                    faq['question'],
                    faq['answer'],
                    cardColor, // Pass color
                    textColor, // Pass color
                    secondaryTextColor, // Pass color
                    accentColor, // Pass color
                  );
                } else {
                  return _buildFaqNavigationTile(
                    faq['question'],
                    cardColor, // Pass color
                    textColor, // Pass color
                    accentColor, // Pass color
                  );
                }
              },
            ),

            const SizedBox(height: 32),
            Center(
              child: FontWidget(
                text: 'Destek taleplerinize en kƒ±sa s√ºrede yanƒ±t vereceƒüiz.',
                styleType: TextStyleType.labelLarge,
                color: labelColor,
                fontSize: 13,
                textAlign: TextAlign.center,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Helper widget'lar artƒ±k renkleri parametre olarak almalƒ±
  Widget _buildSectionTitle(String title, Color textColor) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12.0),
      child: FontWidget(
        text: title,
        styleType: TextStyleType.labelLarge,
        color: textColor,
        fontSize: 17,
        fontWeight: FontWeight.w600,
      ),
    );
  }

  // For non-expandable FAQ items
  Widget _buildFaqNavigationTile(
    String question,
    Color cardColor,
    Color textColor,
    Color accentColor,
  ) {
    return Container(
      margin: const EdgeInsets.only(bottom: 10.0),
      decoration: BoxDecoration(
        color: cardColor,
        borderRadius: BorderRadius.circular(12.0),
      ),
      child: ListTile(
        contentPadding:
            const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
        title: FontWidget(
          text: question,
          styleType: TextStyleType.titleMedium,
          color: textColor,
        ),
        trailing: Icon(Icons.arrow_forward_ios, color: accentColor, size: 16),
        onTap: () {
          // TODO: Implement navigation or action for this FAQ
          print('Tapped on: $question');
        },
      ),
    );
  }

  // For expandable FAQ item
  Widget _buildFaqExpansionTile(
    String question,
    String answer,
    Color cardColor,
    Color textColor,
    Color secondaryTextColor,
    Color accentColor,
  ) {
    return Container(
      margin: const EdgeInsets.only(bottom: 10.0),
      decoration: BoxDecoration(
        color: cardColor,
        borderRadius: BorderRadius.circular(12.0),
      ),
      child: ExpansionTile(
        iconColor: accentColor,
        collapsedIconColor: accentColor,
        title: FontWidget(
          text: question,
          styleType: TextStyleType.titleMedium,
          color: textColor,
          fontSize: 17,
          fontWeight: FontWeight.w500,
        ),
        childrenPadding:
            const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0)
                .copyWith(top: 0),
        tilePadding:
            const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
        children: <Widget>[
          FontWidget(
            text: answer,
            styleType: TextStyleType.bodyLarge,
            color: secondaryTextColor,
            fontSize: 14,
          ),
        ],
      ),
    );
  }
}
